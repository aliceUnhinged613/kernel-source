From 3b4b19721ec652ad2c4fe51dfbe5124212b5f581 Mon Sep 17 00:00:00 2001
From: Sagi Grimberg <sagi@grimberg.me>
Date: Wed, 24 Jun 2020 01:53:08 -0700
Subject: [PATCH] nvme: fix possible deadlock when I/O is blocked
Git-commit: 3b4b19721ec652ad2c4fe51dfbe5124212b5f581
Patch-mainline: v5.8-rc3
References: git-fixes

Revert fab7772bfbcf ("nvme-multipath: revalidate nvme_ns_head gendisk
in nvme_validate_ns")

When adding a new namespace to the head disk (via nvme_mpath_set_live)
we will see partition scan which triggers I/O on the mpath device node.
This process will usually be triggered from the scan_work which holds
the scan_lock. If I/O blocks (if we got ana change currently have only
available paths but none are accessible) this can deadlock on the head
disk bd_mutex as both partition scan I/O takes it, and head disk revalidation
takes it to check for resize (also triggered from scan_work on a different
path). See trace [1].

The mpath disk revalidation was originally added to detect online disk
size change, but this is no longer needed since commit cb224c3af4df
("nvme: Convert to use set_capacity_revalidate_and_notify") which already
updates resize info without unnecessarily revalidating the disk (the
mpath disk doesn't even implement .revalidate_disk fop).

[1]: 
--
Kernel: INFO: task kworker/u65:9:494 blocked for more than 241 seconds.
Kernel: Tainted: G           OE     5.3.5-050305-generic #201910071830
Kernel: "echo 0 > /proc/sys/kernel/hung_task_timeout_secs" disables this message.
Kernel: kworker/u65:9   D    0   494      2 0x80004000
Kernel: Workqueue: nvme-wq nvme_scan_work [nvme_core]
Kernel: Call Trace:
Kernel: __schedule+0x2b9/0x6c0
Kernel: schedule+0x42/0xb0
Kernel: schedule_preempt_disabled+0xe/0x10
Kernel: __mutex_lock.isra.0+0x182/0x4f0
Kernel: __mutex_lock_slowpath+0x13/0x20
Kernel: mutex_lock+0x2e/0x40
Kernel: revalidate_disk+0x63/0xa0
Kernel: __nvme_revalidate_disk+0xfe/0x110 [nvme_core]
Kernel: nvme_revalidate_disk+0xa4/0x160 [nvme_core]
Kernel: ? evict+0x14c/0x1b0
Kernel: revalidate_disk+0x2b/0xa0
Kernel: nvme_validate_ns+0x49/0x940 [nvme_core]
Kernel: ? blk_mq_free_request+0xd2/0x100
Kernel: ? __nvme_submit_sync_cmd+0xbe/0x1e0 [nvme_core]
Kernel: nvme_scan_work+0x24f/0x380 [nvme_core]
Kernel: process_one_work+0x1db/0x380
Kernel: worker_thread+0x249/0x400
Kernel: kthread+0x104/0x140
Kernel: ? process_one_work+0x380/0x380
Kernel: ? kthread_park+0x80/0x80
Kernel: ret_from_fork+0x1f/0x40
...
Kernel: INFO: task kworker/u65:1:2630 blocked for more than 241 seconds.
Kernel: kworker/u65:1   D    0  2630      2 0x80004000
Kernel: io_schedule+0x16/0x40
Kernel: do_read_cache_page+0x438/0x830
Kernel: ? __switch_to_asm+0x34/0x70
Kernel: ? file_fdatawait_range+0x30/0x30
Kernel: read_cache_page+0x12/0x20
Kernel: read_dev_sector+0x27/0xc0
Kernel: read_lba+0xc1/0x220
Kernel: ? kmem_cache_alloc_trace+0x19c/0x230
Kernel: efi_partition+0x1e6/0x708
Kernel: ? vsnprintf+0x39e/0x4e0
Kernel: ? snprintf+0x49/0x60
Kernel: check_partition+0x154/0x244
Kernel: rescan_partitions+0xae/0x280
Kernel: __blkdev_get+0x40f/0x560
Kernel: blkdev_get+0x3d/0x140
Kernel: __device_add_disk+0x388/0x480
Kernel: device_add_disk+0x13/0x20
Kernel: nvme_mpath_set_live+0x119/0x140 [nvme_core]
Kernel: nvme_update_ns_ana_state+0x5c/0x60 [nvme_core]
Kernel: nvme_set_ns_ana_state+0x1e/0x30 [nvme_core]
Kernel: nvme_parse_ana_log+0xa1/0x180 [nvme_core]
Kernel: ? nvme_update_ns_ana_state+0x60/0x60 [nvme_core]
Kernel: nvme_mpath_add_disk+0x47/0x90 [nvme_core]
Kernel: nvme_validate_ns+0x396/0x940 [nvme_core]
--

Fixes: fab7772bfbcf ("nvme-multipath: revalidate nvme_ns_head gendisk
in nvme_validate_ns")

Signed-off-by: Anton Eidelman <anton@lightbitslabs.com>
Signed-off-by: Sagi Grimberg <sagi@grimberg.me>
Signed-off-by: Christoph Hellwig <hch@lst.de>
Acked-by: Anthony Iliopoulos <ailiop@suse.com>

---
 drivers/nvme/host/core.c |    1 -
 1 file changed, 1 deletion(-)

--- a/drivers/nvme/host/core.c
+++ b/drivers/nvme/host/core.c
@@ -1572,7 +1572,6 @@
 	if (ns->head->disk) {
 		nvme_update_disk_info(ns->head->disk, ns, id);
 		blk_queue_stack_limits(ns->head->disk->queue, ns->queue);
-		revalidate_disk(ns->head->disk);
 	}
 #endif
 }
