From 9973801ac79f1c8aaf80e00b4e3f357aebebc1a3 Mon Sep 17 00:00:00 2001
From: Qu Wenruo <wqu@suse.com>
Date: Wed, 20 May 2020 14:00:57 +0800
References: bsc#1171417
Subject: [PATCH 2/2] btrfs: relocation: Clear the DEAD_RELOC_TREE bit for
 orphan roots to prevent runaway balance
Git-repo: https://github.com/kdave/btrfs-devel.git
Git-commit: 1dae7e0e58b484eaa43d530f211098fdeeb0f404
Patch-mainline: Queued

[BUG]
There are several reported runaway balance, that balance is flooding the
kernel with "Found X extents" where the X never changes.

[CAUSE]
Commit d2311e698578 ("btrfs: relocation: Delay reloc tree deletion after
merge_reloc_roots") introduced BTRFS_ROOT_DEAD_RELOC_TREE bit to
indicate that one subvolume has finished its tree blocks swap with its
reloc tree.

However if balance is canceled or hits ENOSPC halfway, we didn't clear
the BTRFS_ROOT_DEAD_RELOC_TREE bit, leaving that bit hanging forever
until unmount.

Any subvolume root with that bit, would cause backref cache to skip this
tree block, as it has finished its tree block swap.
This would cause all tree blocks of that root be ignored by balance,
leading to runaway balance.

[FIX]
Fix the problem by also clearing the BTRFS_ROOT_DEAD_RELOC_TREE bit for
the original subvolume of orphan reloc root.

Furthermore to avoid such damn bug to bother anybody anymore, add
unmount time check to detect and warn about this bit.

Fixes: d2311e698578 ("btrfs: relocation: Delay reloc tree deletion after merge_reloc_roots")
Signed-off-by: Qu Wenruo <wqu@suse.com>
---
 fs/btrfs/relocation.c |    2 ++
 1 file changed, 2 insertions(+)

--- a/fs/btrfs/relocation.c
+++ b/fs/btrfs/relocation.c
@@ -2585,6 +2585,8 @@ again:
 					root->reloc_root = NULL;
 					btrfs_put_fs_root(reloc_root);
 				}
+				clear_bit(BTRFS_ROOT_DEAD_RELOC_TREE,
+					  &root->state);
 				btrfs_put_fs_root(root);
 			}
 
